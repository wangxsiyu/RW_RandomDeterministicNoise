model{
	# hyper parameters
	for (h in 1:nHorizon) {
		InfoBonus_mu_n[h] ~ dnorm(0,0.01);
		InfoBonus_sigma_p[h] ~ dexp(0.01);
		for (j in 1:nCond) {
		    NoiseDet_k_p[h, j] ~ dexp(0.01);
		    NoiseDet_lambda_p[h, j] ~ dexp(10);
		    NoiseDet[h, j] <- NoiseDet_k_p[h, j]/NoiseDet_lambda_p[h, j];
			bias_mu_n[h, j] ~ dnorm(0,0.01);
			bias_sigma_p[h, j] ~ dexp(0.01);
		}	
	}
	# calculate horizon changes
	dInfoBonus = InfoBonus_mu_n[2] - InfoBonus_mu_n[1];
	for (j in 1:nCond){
		dNoiseDet[j] = NoiseDet[2,j] - NoiseDet[1,j];
		dbias[j] = bias_mu_n[2,j] - bias_mu_n[1,j];
	}
	# subject-level parameters
	for (s in 1:nSubject){
		for (h in 1:nHorizon){
			Infobonus_sub[h,s] ~ dnorm(InfoBonus_mu_n[h], 1/InfoBonus_sigma_p[h]);
			for (j in 1:nCond) {
				NoiseDet_sub[h,j,s] ~ dgamma(NoiseDet_k_p[h,j], NoiseDet_lambda_p[h,j]);
				NoiseDet_sub_tau[h,j,s] <- 1/NoiseDet_sub[h,j,s];
				bias_sub[h,j,s] ~ dnorm(bias_mu_n[h,j], 1/bias_sigma_p[h,j]);
			}
		}
		# calculate horizon difference in subject-level noise
		for (j in 1:nCond){
			dNoiseDet_sub[s,j] = NoiseDet_sub[2,j, s] - NoiseDet_sub[1,j, s];
		}
	}
	# deterministic noise parameters
	for (s in 1:nSubject){
		for (i in 1:nrepeatID[s]){
			NoiseDet_pair[s, i] ~ dlogis(0, NoiseDet_sub_tau[rpIDHorizon[s,i], rpIDCond[s,i], s]);
		}
	}
	# compute choice likelihood
	for (s in 1:nSubject){
        for (i in 1:nTrial[s]) {
			dQ[s, i] <- dR[s,i] + Infobonus_sub[horizon[s,i],s] * dI[s, i] + bias_sub[horizon[s,i],infocond[s,i],s] + NoiseDet_pair[s,repeatID[s,i]];
			P[s,i]  <- ifelse(dQ[s,i] >= 0, 0.999999999, 0.000000001);
			choice[s,i] ~ dbern( P[s,i] );
		}
	}
}
